{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport let SurveyRepository = /*#__PURE__*/(() => {\n  class SurveyRepository {\n    constructor(dataSource) {\n      this.dataSource = dataSource;\n      this.surveys = [];\n      this.activeSurveys = [];\n      this.responses = [];\n      dataSource.getActiveSurveys().subscribe(data => {\n        this.surveys = data; //get the active surveys\n\n        this.activeSurveys = data.filter(s => s.active == \"true\"); //change the active surveys to inactive if the end date equals todays date\n\n        this.checkActive(); //reassign the active surveys\n\n        this.activeSurveys = data.filter(s => s.active == \"true\");\n        console.log(this.activeSurveys);\n      });\n    }\n\n    getSurveys() {\n      return this.surveys;\n    }\n\n    getSurvey(id) {\n      return this.surveys.find(s => s._id === id);\n    }\n\n    getActiveSurveys() {\n      return this.activeSurveys;\n    }\n\n    checkActive() {\n      this.activeSurveys.forEach(survey => {\n        //check if the end date is todays date\n        //note UTC date not EST\n        const dateObj = new Date();\n        const month = dateObj.getUTCMonth() + 1;\n        const day = dateObj.getUTCDate();\n        const year = dateObj.getUTCFullYear();\n        const today = year + \"/\" + month + \"/\" + day;\n\n        if (new Date(survey.dateClosed) <= new Date(today)) {\n          survey.active = \"false\";\n        }\n      });\n    }\n\n    saveSurvey(savedSurvey) {\n      if (savedSurvey._id === null || savedSurvey._id === 0 || savedSurvey._id === undefined) {\n        this.dataSource.createSurvey(savedSurvey).subscribe(b => {\n          this.surveys.push(savedSurvey);\n        });\n      } else {\n        this.dataSource.updateSurvey(savedSurvey).subscribe(survey => {\n          this.surveys.splice(this.surveys.findIndex(s => s._id === savedSurvey._id), 1, savedSurvey);\n        });\n      }\n    }\n\n    deleteSurvey(deletedSurveyId) {\n      this.dataSource.deleteSurvey(deletedSurveyId).subscribe(survey => {\n        this.surveys.splice(this.surveys.findIndex(s => s._id === deletedSurveyId), 1);\n      });\n    }\n\n    saveResponse(savedResponse) {\n      this.dataSource.saveResponse(savedResponse).subscribe(r => {\n        this.responses.push(savedResponse);\n      });\n    }\n\n  }\n\n  SurveyRepository.ɵfac = function SurveyRepository_Factory(t) {\n    return new (t || SurveyRepository)(i0.ɵɵinject(i1.RestDataSource));\n  };\n\n  SurveyRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SurveyRepository,\n    factory: SurveyRepository.ɵfac\n  });\n  return SurveyRepository;\n})();","map":null,"metadata":{},"sourceType":"module"}